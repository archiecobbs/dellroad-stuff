<?xml version="1.0" encoding="utf-8"?>

<project name="build-macros"
  xmlns:antcontrib="urn:net.sf.antcontrib"
  xmlns:dellroad="urn:org.dellroad.ant"
  xmlns:ivy="urn:org.apache.ivy.ant"
  xmlns:jibx="urn:net.sourceforge.jibx"
  xmlns:testng="urn:org.testng"
  xmlns:cobertura="urn:net.sf.cobertura"
  xmlns:findbugs="urn:edu.umd.cs.findbugs"
  xmlns:checkstyle="urn:net.sf.checkstyle">

<!--
    Instructions for includers of this file:

    - Define "javac.classpath" target finding classes required for javac and unit test compilation
    - Define "unittest.classpath" target finding additional classes required for unit test execution
    - Override "javac.compiler.flags" if desired

-->

    <!-- Project should override these as necessary -->
    <property name="javac.compiler.flags" value="-Xlint:all"/>
    <property name="java.source.version" value="1.7"/>

<!--
        ************* DETERMINE BASE DIRECTORY ****************
-->

    <dirname property="build.macros.dir" file="${ant.file.build-macros}"/>

<!--
        ************* MACRO FOR FINDING ANT LIBRARIES ****************
-->

    <!-- Set variables -->
    <property name="data.dir" value="/usr/share"/>

    <macrodef uri="urn:org.dellroad.ant" name="findantlib">
        <attribute name="property" description="Name of property to set"/>
        <attribute name="file" description="Name of library to look for"/>
        <sequential>
            <condition property="@{property}" value="${data.dir}/java/@{file}">
                <and>
                    <not>
                        <isset property="@{property}"/>
                    </not>
                    <available file="${data.dir}/java/@{file}" type="file"/>
                </and>
            </condition>
            <condition property="@{property}" value="${ant.library.dir}/@{file}">
                <and>
                    <not>
                        <isset property="@{property}"/>
                    </not>
                    <available file="${ant.library.dir}/@{file}" type="file"/>
                </and>
            </condition>
            <fail message="ERROR: can't find @{file}; please install in ${data.dir}/java or ${ant.library.dir}, or pass -D@{property}=... on the command line">
                <condition>
                    <not>
                        <isset property="@{property}"/>
                    </not>
                </condition>
            </fail>
            <fail message="ERROR: invalid value for ${@{property}}">
                <condition>
                    <not>
                        <available file="${@{property}}" type="file"/>
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>

<!--
        ************* DEFINE ANTCONTRIB AND IVY STUFF ****************
-->

    <!-- Import ivy ant tasks -->
    <dellroad:findantlib property="ivy.jar" file="ivy.jar"/>
    <taskdef uri="urn:org.apache.ivy.ant" resource="org/apache/ivy/ant/antlib.xml" classpath="${ivy.jar}"/>

    <!-- Import ant-contrib ant tasks -->
    <dellroad:findantlib property="ant-contrib.jar" file="ant-contrib.jar"/>
    <taskdef uri="urn:net.sf.antcontrib" resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}"/>

    <!-- Get the sed(1) 'extended regular expression' flag for this O/S ('-E' for BSDish, '-r' for Linux) -->
    <exec outputproperty="sed.extended.flag" executable="/bin/sh" logError="true" failonerror="true">
        <arg value="-c"/>
        <arg value="case `uname -s` in
            Darwin|*BSD)
                printf '%s' -E;
                ;;
            *)
                printf '%s' -r;
                ;;
            esac"/>
    </exec>

<!--
        ************* IVY CONFIGURATION ****************
-->

    <!--
        Macro for resolving a classpath by naming the module, etc. directly.
        Defines classpath "@{pathid}" and sets property "@{pathid}.resolved".
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivymodpath">
        <attribute name="pathid" description="Classpath reference id to define"/>
        <attribute name="org" description="Module organisation name"/>
        <attribute name="mod" description="Module module name"/>
        <attribute name="rev" description="Module revision"/>
        <attribute name="conf" default="default" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:cachepath settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}" pathid="@{pathid}"/>
            <property name="@{pathid}.resolved" value="true"/>
        </sequential>
    </macrodef>

    <!--
        Macro for resolving a classpath using a named configuration in ivy.xml.
        Defines classpath "@{pathid}" and sets property "@{pathid}.resolved".
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivypath">
        <attribute name="pathid" description="Classpath reference id to define"/>
        <attribute name="ivyfile" default="${basedir}/src/ivy/ivy.xml" description="ivy.xml defining the named configuration"/>
        <attribute name="conf" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:cachepath file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}" pathid="@{pathid}"/>
            <property name="@{pathid}.resolved" value="true"/>
        </sequential>
    </macrodef>

    <!--
        Macro for resolving a fileset using a named configuration in ivy.xml.
        Defines fileset "@{setid}" and sets property "@{setid}.resolved".
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivyfileset">
        <attribute name="setid" description="Fileset reference id to define"/>
        <attribute name="ivyfile" default="${basedir}/src/ivy/ivy.xml" description="ivy.xml defining the named configuration"/>
        <attribute name="conf" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:cachefileset file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}" setid="@{setid}"/>
            <property name="@{setid}.resolved" value="true"/>
        </sequential>
    </macrodef>

    <!--
        Macro for retrieving ivy artifacts using a named configuration in ivy.xml.
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivyput">
        <attribute name="pattern" description="Ivy pattern for artifact destination"/>
        <attribute name="ivyfile" default="${basedir}/src/ivy/ivy.xml" description="ivy.xml defining the named configuration"/>
        <attribute name="conf" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:retrieve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}" pattern="@{pattern}"/>
        </sequential>
    </macrodef>

    <!--
        Macro for retrieving artifacts by naming the module, etc. directly.
        Does not require an ivy.xml file.
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivymodget">
        <attribute name="pattern" description="Ivy pattern for artifact destination"/>
        <attribute name="org" description="Module organisation name"/>
        <attribute name="mod" description="Module module name"/>
        <attribute name="rev" description="Module revision"/>
        <attribute name="conf" default="default" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:retrieve settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}" pattern="@{pattern}"/>
        </sequential>
    </macrodef>

    <!--
        Macro for generating a resolution report for a given configuration.
        Requires a previous <ivy:resolve> operation.
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivyreport">
        <attribute name="conf" default="default" description="Name of the ivy configuration to report"/>
        <attribute name="destdir" default="build/reports/ivy" description="Directory in which to put generated reports"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <sequential>
            <mkdir dir="@{destdir}"/>
            <ivy:report settingsRef="@{settingsRef}" conf="@{conf}" todir="@{destdir}" xml="true" outputpattern="[conf].[ext]"/>
        </sequential>
    </macrodef>

    <!-- Configure Ivy -->
    <antcontrib:if>
        <available file="${basedir}/src/ivy/settings.xml" type="file"/>
        <antcontrib:then>
            <ivy:settings id="build-macros-ivy-settings" file="${basedir}/src/ivy/settings.xml"/>
        </antcontrib:then>
        <antcontrib:elseif>
            <available file="${data.dir}/ivy/settings.xml" type="file"/>
            <antcontrib:then>
                <ivy:settings id="build-macros-ivy-settings" file="${data.dir}/ivy/settings.xml"/>
            </antcontrib:then>
        </antcontrib:elseif>
        <antcontrib:else>
            <ivy:settings id="build-macros-ivy-settings" file="${build.macros.dir}/ivysettings.xml"/>
        </antcontrib:else>
    </antcontrib:if>

<!--
        ************* MACROS AND PRESETDEFS ****************
-->

    <!-- SVN revision -->
    <macrodef uri="urn:org.dellroad.ant" name="svnrevision">
        <attribute name="property" default="svn.revision" description="Name of property to set"/>
        <attribute name="dir" default="${basedir}" description="Target checked-out SVN directory"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/sh" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="svnversion -c @{dir} | sed ${sed.extended.flag} -e 's/^[0-9]+://g' -e 's/^-1M$$/0/g' -e 's/^Un(versioned|committed).*$$/0/g'"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- Hostname -->
    <macrodef uri="urn:org.dellroad.ant" name="hostname">
        <attribute name="property" default="host.name" description="Name of property to set"/>
        <sequential>
            <exec outputproperty="@{property}" executable="hostname" logError="true" failonerror="true"/>
        </sequential>
    </macrodef>

    <!-- OS name and release -->
    <macrodef uri="urn:org.dellroad.ant" name="osname">
        <attribute name="property" description="Name of property to set"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    if ! [ -r /etc/os-release ]; then
                        echo 'Error: /etc/os-release is not readable; setting $${@{property}} to unknown' 1&gt;&amp;2;
                        echo 'unknown';
                    fi;
                    . /etc/os-release;
                    echo &quot;$${ID}&quot;;
                "/>
            </exec>
        </sequential>
    </macrodef>
    <macrodef uri="urn:org.dellroad.ant" name="osrelease">
        <attribute name="property" description="Name of property to set"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    if ! [ -r /etc/os-release ]; then
                        echo 'Error: /etc/os-release is not readable; setting $${@{property}} to 0.0' 1&gt;&amp;2;
                        echo '0.0';
                    fi;
                    . /etc/os-release;
                    echo &quot;$${VERSION_ID}&quot;;
                "/>
            </exec>
        </sequential>
    </macrodef>

    <!-- SuSE version (OBSOLETE - do not use) -->
    <macrodef uri="urn:org.dellroad.ant" name="suseversion">
        <sequential>
            <fail message="&lt;dellroad:suseversion&gt; has been replaced by &lt;dellroad:osname&gt; and &lt;dellroad:osrelease&gt;"/>
        </sequential>
    </macrodef>

    <!-- Check umask -->
    <macrodef uri="urn:org.dellroad.ant" name="checkumask">
        <attribute name="u" default="" description="Required user bits"/>
        <attribute name="g" default="" description="Required group bits"/>
        <attribute name="o" default="" description="Required other bits"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    set -e;
                    bailout()
                    {
                        echo ERROR: $${1+&quot;$@&quot;} 1>&amp;2;
                        exit 1;
                    };
                    PAT='^u=((r)?(w)?(x)?),g=((r)?(w)?(x)?),o=((r)?(w)?(x)?)$$';
                    UBITS=`umask -S`;
                    echo $${UBITS} | grep -qE &quot;$${PAT}&quot; || bailout failed to parse umask: `umask -S`;
                    [ '@{u}' = '' -o `echo $${UBITS} | sed ${sed.extended.flag} 's|'&quot;$${PAT}&quot;'|\1|g'` = '@{u}' ]
                      || bailout umask must have u='@{u}';
                    [ '@{g}' = '' -o `echo $${UBITS} | sed ${sed.extended.flag} 's|'&quot;$${PAT}&quot;'|\5|g'` = '@{g}' ]
                      || bailout umask must have g='@{g}';
                    [ '@{o}' = '' -o `echo $${UBITS} | sed ${sed.extended.flag} 's|'&quot;$${PAT}&quot;'|\9|g'` = '@{o}' ]
                      || bailout umask must have o='@{o}';
                "/>
            </exec>
        </sequential>
    </macrodef>

    <!--
        JPA 2.0 schema generation

        Requires:
            path "javac.classpath"
            path "schema.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="schemagen">
        <attribute name="jpaxml" description="JPA persistence.xml file"/>
        <attribute name="log4j" description="Log4J XML config file"/>
        <attribute name="unit" description="JPA unit"/>
        <attribute name="dir" description="Output directory"/>
        <attribute name="file" description="Output filename"/>
        <element name="fixups" optional="yes" description="Schema fixups (optional)"/>
        <sequential>

            <!-- Build JAR file for hibernatetool -->
            <delete file="build/schemagen.jar"/>
            <delete dir="build/schemagen"/>
            <mkdir dir="build/schemagen/META-INF"/>
            <copy file="@{log4j}" tofile="build/schemagen/log4j.xml"/>
            <copy file="@{jpaxml}" toFile="build/schemagen/META-INF/persistence.xml"/>
            <jar destfile="build/schemagen.jar">
                <fileset dir="build/schemagen" includes="**/*"/>
                <fileset dir="build/classes" includes="**/*.class"/>
            </jar>
            <delete dir="build/schemagen"/>

            <!-- Run hibernatetool -->
            <taskdef name="hibernatetool" classpathref="schema.classpath" classname="org.hibernate.tool.ant.HibernateToolTask"/>
            <hibernatetool destdir="@{dir}">
                <classpath>
                    <fileset dir="build" includes="schemagen.jar"/>
                    <path refid="javac.classpath"/>
                </classpath>
                <jpaconfiguration persistenceunit="@{unit}"/>
                <hbm2ddl export="false" drop="false" create="true" update="false" format="true"
                  outputfilename="@{file}" delimiter=";" haltonerror="true"/>
            </hibernatetool>
            <delete file="build/schemagen.jar"/>

            <!-- Apply fixups -->
            <fixups/>
        </sequential>
    </macrodef>

    <!--
        JPA 2.1 schema generation

        Requires:
            path "javac.classpath"
            path "schema.classpath"

        Required JARs: hibernate, JPA persistence API, dellroad-stuff
    -->
    <macrodef uri="urn:org.dellroad.ant" name="jpaschemagen">
        <attribute name="jpaxml" description="JPA persistence.xml file"/>
        <attribute name="log4j" description="Log4J XML config file"/>
        <attribute name="unit" description="JPA persistence unit name"/>
        <attribute name="outputFile" description="Output file"/>
        <attribute name="create" default="true" description="Output create statements"/>
        <attribute name="drop" default="false" description="Output drop statements"/>
        <attribute name="delimiter" default=";" description="SQL command delimiter"/>
        <attribute name="driver" default="com.mysql.jdbc.Driver" description="Database driver class"/>
        <attribute name="url" default="" description="Database JDBC URL"/>
        <attribute name="username" default="root" description="Database connection username"/>
        <attribute name="password" default="" description="Database connection password"/>
        <attribute name="databaseProductName" default="MySQL" description="Database product name"/>
        <attribute name="databaseMajorVersion" default="5" description="Database major version"/>
        <attribute name="databaseMinorVersion" default="0" description="Database minor version"/>
        <element name="fixups" optional="yes" description="Schema fixups (optional)"/>
        <sequential>

            <!-- Build JAR file for schema generation -->
            <delete file="build/schemagen.jar"/>
            <delete dir="build/schemagen"/>
            <mkdir dir="build/schemagen/META-INF"/>
            <copy file="@{log4j}" tofile="build/schemagen/log4j.xml"/>
            <copy file="@{jpaxml}" toFile="build/schemagen/META-INF/persistence.xml"/>
            <jar destfile="build/schemagen.jar">
                <fileset dir="build/schemagen" includes="**/*"/>
                <fileset dir="build/classes" includes="**/*.class"/>
            </jar>

            <!-- Generate DDL -->
            <taskdef uri="urn:org.dellroad.ant" name="jpaschemagen" classpathref="schema.classpath" classname="org.dellroad.stuff.ant.JPASchemaGeneratorTask"/>
            <dellroad:jpaschemagen unit="@{unit}" file="build/schemagen/jpaddl.sql" create="@{create}" drop="@{drop}"
              driver="@{driver}" url="@{url}" username="@{username}" password="@{password}"
              databaseProductName="@{databaseProductName}" databaseMajorVersion="@{databaseMajorVersion}" databaseMinorVersion="@{databaseMinorVersion}">
                <classpath>
                    <fileset dir="build" includes="schemagen.jar"/>
                    <path refid="javac.classpath"/>
                </classpath>
            </dellroad:jpaschemagen>
            <delete file="build/schemagen.jar"/>

            <!-- Format DDL -->
            <taskdef uri="urn:org.dellroad.ant" name="hibernateddl" classpathref="schema.classpath" classname="org.dellroad.stuff.ant.HibernateDDLFormatterTask"/>
            <dellroad:hibernateddl inputFile="build/schemagen/jpaddl.sql" outputFile="@{outputFile}" delimiter="@{delimiter}"/>

            <!-- Clean up -->
            <delete dir="build/schemagen"/>

            <!-- Apply fixups -->
            <fixups/>
        </sequential>
    </macrodef>

    <!--
        Schema Update Verification

        Requirements:

            - You must have a local MySQL instance running
            - You must have run the "setupSchemacheck.sql" script on it

        How this works:

          - The local MySQL database as a user "schemacheck" (same p/w) with all priviledges on schemacheck\_%
          - LiquiBase *should* automatically detect any schema differences and if so the build will fail
          - In any case, the SQL exports are diff'd as well; some differences might not be material but do a double check
    -->
    <macrodef uri="urn:org.dellroad.ant" name="schemacheck">
        <attribute name="original" description="Starting schema file"/>
        <attribute name="changes" description="Update schema file"/>
        <attribute name="expected" description="Expected result schema file"/>
        <attribute name="classpathref" description="Classpath reference containing MySQL driver and Liquibase &gt; 2.0.0"/>
        <attribute name="dbhost" default="localhost" description="Database host"/>
        <attribute name="dbuser" default="schemacheck" description="Database username"/>
        <attribute name="dbpass" default="schemacheck" description="Database password"/>
        <sequential>

            <!-- Reset -->
            <delete dir="build/schemacheck"/>
            <mkdir dir="build/schemacheck"/>

            <!-- Create check databases -->
            <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://@{dbhost}/" classpathref="@{classpathref}"
              userid="@{dbuser}" password="@{dbpass}" print="false" showheaders="false" showtrailers="false">
                <transaction>
                    DROP DATABASE IF EXISTS `schemacheck_1`;
                    DROP DATABASE IF EXISTS `schemacheck_2`;
                    CREATE DATABASE `schemacheck_1` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
                    CREATE DATABASE `schemacheck_2` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
                </transaction>
            </sql>

            <!-- Apply original schema plus all updates to database #1 -->
            <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://@{dbhost}/schemacheck_1?autoGenerateTestcaseScript=true"
              classpathref="@{classpathref}" userid="@{dbuser}" password="@{dbpass}" print="false" showheaders="false"
              showtrailers="false" autocommit="true">
                <transaction src="@{original}"/>
                <transaction src="@{changes}"/>
            </sql>

            <!-- Apply up-to-date schema to database #2 -->
            <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://@{dbhost}/schemacheck_2" classpathref="@{classpathref}"
              userid="@{dbuser}" password="@{dbpass}" print="false" showheaders="false" showtrailers="false">
                <transaction src="@{expected}"/>
            </sql>

            <!-- Dump schemas as flat files -->
            <exec executable="mysqldump" output="build/schemacheck/1.sql" logError="true" failonerror="true">
                <arg line="-u @{dbuser} --password=@{dbpass} --host=@{dbhost} --no-data schemacheck_1"/>
            </exec>
            <exec executable="mysqldump" output="build/schemacheck/2.sql" logError="true" failonerror="true">
                <arg line="-u @{dbuser} --password=@{dbpass} --host=@{dbhost} --no-data schemacheck_2"/>
            </exec>

            <!-- Compute schema diff using liquibase -->
            <taskdef resource="liquibasetasks.properties" classpathref="@{classpathref}"/>
            <diffDatabase driver="com.mysql.jdbc.Driver" classpathref="@{classpathref}"
              url="jdbc:mysql://@{dbhost}/schemacheck_1" username="@{dbuser}" password="@{dbpass}"
              referenceUrl="jdbc:mysql://@{dbhost}/schemacheck_2" referenceUsername="@{dbuser}" referencePassword="@{dbpass}"
              outputFile="build/schemacheck/diff.txt">
            </diffDatabase>
            <exec executable="sh" logError="true" failonerror="false">
                <arg value="-c"/>
                <arg value="
                    cat build/schemacheck/diff.txt
                       | grep -vE '^(Reference|Target) Database: '
                       | grep -vE ': (EQUAL|NONE)$$'
                       &gt; build/schemacheck/mismatch.txt;
                    true;
                "/>
            </exec>

            <!-- Drop databases -->
            <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://@{dbhost}/" classpathref="@{classpathref}"
              userid="@{dbuser}" password="@{dbpass}" print="false" showheaders="false" showtrailers="false">
                DROP DATABASE `schemacheck_1`;
                DROP DATABASE `schemacheck_2`;
            </sql>

            <!-- Show liquibase schema differences -->
            <concat>
                <fileset file="build/schemacheck/mismatch.txt"/>
            </concat>
            <condition property="schemacheck.match">
                <filesmatch file1="build/schemacheck/mismatch.txt" file2="/dev/null"/>
            </condition>
            <fail message="ERROR: schema mismatch (see above for details)" unless="schemacheck.match"/>

            <!-- Show diff(1) of schema dumps -->
            <exec executable="diff" logError="true" failonerror="false">
                <arg value="-u"/>
                <arg value="-I"/>
                <arg value="^-- Host: @{dbhost}"/>
                <arg value="-I"/>
                <arg value="^-- Dump completed on"/>
                <arg value="build/schemacheck/1.sql"/>
                <arg value="build/schemacheck/2.sql"/>
            </exec>
        </sequential>
    </macrodef>

    <!--
        JiBX binding for a single JiBX binding unit

        Requires:
            path "jibx-bind.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="jibx-bind">
        <attribute name="name" default="classes" description="Name of what we're binding"/>
        <element name="classes" description="Path(s) for target classes to bind"/>
        <element name="bindings" description="Fileset includes for binding files"/>
        <sequential>
            <taskdef uri="urn:net.sourceforge.jibx" name="bind"
              classname="org.jibx.binding.ant.CompileTask" classpathref="jibx-bind.classpath"/>
            <echo message="performing JiBX binding for @{name}"/>
            <jibx:bind verbose="false" load="true">
                <classpath>
                    <classes/>
                    <path refid="jibx-bind.classpath"/>
                </classpath>
                <bindingfileset dir="${basedir}">
                    <bindings/>
                </bindingfileset>
            </jibx:bind> 
        </sequential>
    </macrodef>

    <macrodef uri="urn:org.dellroad.ant" name="verifyclean">
        <sequential>
            <exec outputproperty="verifyclean.svn.version" executable="/bin/sh" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="svnversion"/>
            </exec>
            <fail message="!&#10;&#10;
                *** ERROR ***&#10;&#10;
                The checked out code is not clean (SVN revision is `${verifyclean.svn.version}').&#10;&#10;
                Please SVN update and/or commit first (or invoke ant with -Dpublish.dirty=true&#10;
                if you really know what you're doing).&#10;">
                <condition>
                    <not>
                        <or>
                            <isset property="publish.dirty"/>
                            <matches pattern="^[0-9.]+$" string="${verifyclean.svn.version}"/>
                        </or>
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>

    <!-- RPM build -->
    <macrodef uri="urn:org.dellroad.ant" name="rpmbuild">
        <attribute name="specfile" default="${ant.project.name}.spec" description="Name of RPM spec file"/>
        <attribute name="buildflag" default="-bb" description="rpmbuild(1) build flag"/>
        <attribute name="rpmflags" default="" description="Additional flags to rpmbuild"/>
        <attribute name="fresh" default="true" description="Blow away old RPMs in dist/RPMS first"/>
        <element name="source-preparation" optional="yes"/>
        <sequential>
            <delete dir="build/rpm"/>
            <mkdir dir="build/rpm/BUILD"/>
            <mkdir dir="build/rpm/RPMS"/>
            <mkdir dir="build/rpm/SOURCES"/>
            <mkdir dir="build/rpm/SPECS"/>
            <mkdir dir="build/rpm/SRPMS"/>
            <antcontrib:if>
                <istrue value="@{fresh}"/>
                <antcontrib:then>
                    <delete dir="dist/RPMS"/>
                </antcontrib:then>
            </antcontrib:if>
            <mkdir dir="dist/RPMS"/>
            <dellroad:svnrevision property="svn_revision"/>
            <antcontrib:if>
                <available file="src/rpm/@{specfile}" type="file"/>
                <antcontrib:then>
                    <copy file="src/rpm/@{specfile}" todir="build/rpm/SPECS" verbose="true"/>
                </antcontrib:then>
            </antcontrib:if>
            <antcontrib:if>
                <available file="src/sources" type="dir"/>
                <antcontrib:then>
                    <copy todir="build/rpm/SOURCES" verbose="true">
                        <fileset dir="src/sources">
                            <include name="**/*"/>
                            <exclude name="**/.svn"/>
                        </fileset>
                    </copy>
                </antcontrib:then>
            </antcontrib:if>
            <source-preparation/>
            <!-- _topdir definition is a workaround for a bug in ant 1.7.0 Rpm.java, line 123 (missing space) -->
            <rpm topdir="build/rpm" specfile="@{specfile}" command="@{buildflag} --define '_topdir ${basedir}/build/rpm'
              --define 'svn_revision ${svn_revision}' @{rpmflags}" rpmBuildCommand="rpmbuild"
              failOnError="true"/>
            <copy todir="dist" overwrite="true" verbose="true">
                <fileset dir="build/rpm">
                    <include name="RPMS/*/*.rpm"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <!-- RPM publish -->
    <macrodef uri="urn:org.dellroad.ant" name="rpmdist">
        <attribute name="repohost" default="" description="Hostname of server where repository lives"/>
        <attribute name="repodir" default="/opt/repo/devel" description="Base RPM repository directory"/>
        <attribute name="osname" default="" description="Repository O/S name (default current)"/>
        <attribute name="osrel" default="" description="Repository O/S release (default current)"/>
        <attribute name="susever" default="" description="Repository openSuSE version (OBSOLETE - do not use)"/>
        <attribute name="purge" default="false" description="Whether to remove all other revisions from repository"/>
        <attribute name="pattern" default="*.rpm" description="Filename glob pattern"/>
        <sequential>

            <!-- Refuse to publish uncommitted code -->
            <dellroad:verifyclean/>

            <!-- Check for obsolete usage -->
            <fail message="ERROR: susever attribute has been replaced by by osname and osrel">
                <condition>
                    <length string="@{susever}" when="greater" length="0"/>
                </condition>
            </fail>

            <!-- Get repository O/S name and version -->
            <exec outputproperty="_rpmdist.osname.@{osname}" executable="/bin/sh" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    if [ -n '@{osname}' ]; then
                        echo '@{osname}';
                    else
                        . /etc/os-release;
                        echo &quot;$${ID}&quot;;
                    fi;
                "/>
            </exec>
            <exec outputproperty="_rpmdist.osrel.@{osrel}" executable="/bin/sh" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    if [ -n '@{osrel}' ]; then
                        echo '@{osrel}';
                    else
                        . /etc/os-release;
                        echo &quot;$${VERSION_ID}&quot;;
                    fi;
                "/>
            </exec>

            <!-- Combine O/S name and release -->
            <property name="_rpmdist.osver.@{osname}@{osrel}" value="${_rpmdist.osname.@{osname}}${_rpmdist.osrel.@{osrel}}"/>

            <!-- Optionally remove older versions -->
            <antcontrib:if>
                <equals arg1="@{purge}" arg2="true"/>
                <antcontrib:then>
                    <echo message="Note: removing old RPM(s) in @{repodir}/${_rpmdist.osver.@{osname}@{osrel}}:"/>
                    <exec executable="/bin/bash" logError="true" failonerror="true">
                        <arg value="-c"/>
                        <arg value="
                            set -e;

                            for FILE in `find dist/RPMS -type f -name '@{pattern}' -print`; do
                                NAME=`rpm -qp --queryformat='%{name}\n' &quot;$${FILE}&quot;`;
                                (
                                    if [ -z '@{repohost}' -o '@{repohost}' = `hostname` ]; then
                                        find '@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}'
                                            -type f -name &quot;$${NAME}-*.rpm&quot; -print0
                                          | xargs -n 1 -0 -I@ sh -c
                                            'test `rpm -qp --queryformat=&quot;%{name}&quot; &quot;@&quot;`
                                              = &quot;'&quot;$${NAME}&quot;'&quot; &amp;&amp; echo &quot;@&quot;'
                                          | xargs -n 1 -r -I@ sh -c 'echo @; rm @';
                                    else
                                        ssh '@{repohost}' find \''@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}'\'
                                            -type f -name \&quot;&quot;$${NAME}-*.rpm&quot;\&quot; -print0
                                          \| xargs -n 1 -0 -I@ sh -c
                                            \''test `rpm -qp --queryformat=&quot;%{name}&quot; &quot;@&quot;`
                                              = &quot;'\''&quot;'&quot;$${NAME}&quot;'&quot;'\''&quot; &amp;&amp; echo &quot;@&quot;'\'
                                          \| xargs -n 1 -r -I@ sh -c \''echo @; rm @'\';
                                    fi;
                                ) | sed ${sed.extended.flag} 's|^.*/([^/]+)$$|    \1|g';
                            done;
                        "/>
                    </exec>
                </antcontrib:then>
            </antcontrib:if>

            <!-- Copy new RPMs into the repository, but avoid mixing openSUSE versions -->
            <exec executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    set -e;
                    cd dist/RPMS;
                    (
                        set +e;
                        find * -type f -name '@{pattern}' -print | grep -vE '^.*\.${_rpmdist.osname.@{osname}}[0-9][0-9.]*\..*$$';
                        find * -type f -name '@{pattern}' -print | grep -E '^.*\.${_rpmdist.osver.@{osname}@{osrel}}\..*$$';
                    ) | (
                        if [ -z '@{repohost}' -o '@{repohost}' = `hostname` ]; then
                            echo 'Publishing RPMs to @{repodir}/${_rpmdist.osver.@{osname}@{osrel}}:';
                            umask 002;
                            cpio --quiet -pmudvl '@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}' 2&gt;&amp;1
                              | grep -vE '^cpio: .* linked to'
                              | sed ${sed.extended.flag} 's|@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}/[^/]+/|    |g'
                              | sort;
                        else
                            echo 'Publishing RPMs to @{repodir}/${_rpmdist.osver.@{osname}@{osrel}} on @{repohost}:';
                            cpio -o -H crc --quiet
                              | ( ssh '@{repohost}' cd \''@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}'\'
                                \&amp;\&amp; umask 002 \&amp;\&amp; cpio --quiet -imudv '2&gt;&amp;1' )
                              | sed ${sed.extended.flag} 's|^[^/]+/|    |g'
                              | sort;
                        fi;
                    )
                "/>
            </exec>

            <!-- Regenerate repository meta-data -->
            <exec executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    set -e;
                    if [ -z '@{repohost}' -o '@{repohost}' = `hostname` ]; then
                        echo 'Regenerating repository meta-data...';
                        umask 002;
                        createrepo -q -c '@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}/cache'
                          --update '@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}';
                    else
                        echo 'Regenerating repository meta-data on @{repohost}...';
                        ssh '@{repohost}' umask 002
                          \&amp;\&amp; createrepo -q -c \''@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}/cache'\'
                          --update \''@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}'\';
                    fi;
                "/>
            </exec>

            <!-- Work around this bug: https://bugzilla.novell.com/show_bug.cgi?id=659915 -->
            <exec executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    set -e;
                    if [ -z '@{repohost}' -o '@{repohost}' = `hostname` ]; then
                        chmod g+w '@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}/repodata';
                    else
                        ssh '@{repohost}' chmod g+w \''@{repodir}/${_rpmdist.osver.@{osname}@{osrel}}/repodata'\';
                    fi;
                "/>
            </exec>
        </sequential>
    </macrodef>

    <!-- RPM install (to local machine) -->
    <macrodef uri="urn:org.dellroad.ant" name="rpminstall">
        <attribute name="osname" default="" description="Repository O/S name (default current)"/>
        <attribute name="osrel" default="" description="Repository O/S release (default current)"/>
        <attribute name="susever" default="" description="Repository openSuSE version (OBSOLETE - do not use)"/>
        <attribute name="force" default="false" description="Whether to force installation (rpm --force)"/>
        <attribute name="pattern" default="*.rpm" description="Filename glob pattern"/>
        <sequential>

            <!-- Check for obsolete usage -->
            <fail message="ERROR: susever attribute has been replaced by by osname and osrel">
                <condition>
                    <length string="@{susever}" when="greater" length="0"/>
                </condition>
            </fail>

            <exec executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    set -e;
                    FORCE_FLAG='';
                    if [ '@{force}' = 'true' ]; then
                        FORCE_FLAG='--force';
                    fi;
                    . /etc/os-release;
                    if [ -n '@{osname}' ]; then
                        OSNAME='@{osname}';
                    else
                        OSNAME=&quot;$${ID}&quot;;
                    fi;
                    if [ -n '@{osrel}' ]; then
                        OSREL='@{osrel}';
                    else
                        OSREL=&quot;$${VERSION_ID}&quot;;
                    fi;
                    if [ &quot;$${ID}&quot; != &quot;$${OSNAME}&quot; -o &quot;$${VERSION_ID}&quot; != &quot;$${OSREL}&quot; ]; then
                        echo &quot;Warning: not installing $${OSNAME}$${OSREL} RPMs on the $${ID}$${VERSION_ID} local machine&quot;;
                    else
                        echo &quot;Installing RPMs on the local machine ($${OSNAME}$${OSREL}):&quot;;
                        cd dist/RPMS;
                        (
                            set +e;
                            find * -type f -name '@{pattern}' -print | grep -vE '^.*\.'&quot;$${OSNAME}&quot;'[0-9][0-9.]*\..*$$';
                            find * -type f -name '@{pattern}' -print | grep -E '^.*\.'&quot;$${OSNAME}$${OSREL}&quot;'\..*$$';
                        ) | xargs -rt sudo rpm -Uvh $${FORCE_FLAG};
                    fi;
                "/>
            </exec>
        </sequential>
    </macrodef>

    <!--
        Unit test macro

        Requires:
            path "javac.classpath"
            path "unittest.classpath"
            path "testng.classpath"
            path "cobertura.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="unit-tests">
        <attribute name="testngfile" default="${basedir}/src/test/testng.xml" description="TestNG control file"/>
        <attribute name="cobertura" default="true" description="Instrument class files with Cobertura"/>
        <element name="excludes" optional="yes"/>
        <element name="addclasspath" optional="yes"/>
        <element name="testng" optional="yes"/>
        <sequential>

            <!-- Define TestNG and Cobertura ant tasks -->
            <taskdef uri="urn:org.testng"
              resource="testngtasks" classpathref="testng.classpath"/>
            <taskdef uri="urn:net.sf.cobertura"
              resource="tasks.properties" classpathref="cobertura.classpath"/>

            <!-- Instrument Classes -->
            <antcontrib:if>
                <equals arg1="@{cobertura}" arg2="true"/>
                <antcontrib:then>
                    <delete dir="${basedir}/build/cobertura"/>
                    <delete dir="${basedir}/build/reports/coverage"/>
                    <mkdir dir="${basedir}/build/cobertura/classes"/>
                    <mkdir dir="${basedir}/build/reports/coverage"/>
                    <cobertura:cobertura-instrument todir="${basedir}/build/cobertura/classes"
                      datafile="${basedir}/build/cobertura/cobertura.ser">
                        <fileset dir="${basedir}/build/classes">
                            <include name="**/*.class"/>
                            <excludes/>
                        </fileset>
                        <auxClasspath>
                            <addclasspath/>
                        </auxClasspath>
                    </cobertura:cobertura-instrument>
                </antcontrib:then>
            </antcontrib:if>

            <!-- Run tests -->
            <testng:testng outputDir="${basedir}/build/reports/tests" haltOnfailure="true">
                <xmlfileset file="@{testngfile}"/>
                <jvmarg value="-Djava.awt.headless=true"/>
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/build/cobertura/cobertura.ser"/>
                <classpath>
                    <addclasspath/>
                    <pathelement location="${basedir}/build/cobertura/classes"/>
                    <pathelement location="${basedir}/build/classes"/>
                    <pathelement location="${basedir}/build/test"/>
                    <pathelement location="${basedir}/build/resources"/>
                    <path refid="javac.classpath"/>
                    <path refid="unittest.classpath"/>
                    <path refid="cobertura.classpath"/>
                </classpath>
                <testng/>
            </testng:testng>

            <!-- Generate coverage report -->
            <antcontrib:if>
                <equals arg1="@{cobertura}" arg2="true"/>
                <antcontrib:then>
                    <cobertura:cobertura-report format="html" destdir="${basedir}/build/reports/coverage"
                      srcdir="${basedir}/src/java" datafile="${basedir}/build/cobertura/cobertura.ser"/>
                </antcontrib:then>
            </antcontrib:if>
        </sequential>
    </macrodef>

    <presetdef uri="urn:org.dellroad.ant" name="javac-default">
        <javac includeantruntime="no"
               compiler="modern"
               deprecation="true"
               source="${java.source.version}"
               target="${java.source.version}"
               debug="true">
            <compilerarg line="${javac.compiler.flags}"/>
        </javac>
    </presetdef>

    <!--
        Javadoc macro

        Requires:
            path "javac.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="javadoc">
        <attribute name="title" default="Java Class Library API"/>
        <attribute name="overview" default="${basedir}/src/java/overview.html"/>
        <element name="links" optional="yes"/>
        <element name="excludes" optional="yes"/>
        <element name="additional-classpath" optional="yes"/>
        <sequential>
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src/java">
                        <include name="**/*.java"/>
                        <excludes/>
                    </fileset>
                </sourcefiles>
                <targetfiles path="build/reports/javadoc/index.html"/>
                <sequential>
                    <delete dir="build/reports/javadoc"/>
                    <mkdir dir="build/reports/javadoc"/>
                    <javadoc destdir="build/reports/javadoc" use="true" overview="@{overview}"
                      source="${java.source.version}" breakiterator="yes" linksource="true"
                      windowtitle="@{title}" doctitle="@{title}" failonerror="true">
                        <classpath>
                            <additional-classpath/>
                            <path refid="javac.classpath"/>
                        </classpath>
                        <packageset dir="src/java" defaultexcludes="yes">
                            <include name="**/*"/>
                            <excludes/>
                        </packageset>
                        <links/>
                        <arg value="-notimestamp"/>
                    </javadoc>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        Javadoc macro supporting AOP aspects

        Requires:
            path "javac.classpath"
            AspectJ taskdefs defined
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ajavadoc">
        <attribute name="title" default="Java Class Library API"/>
        <element name="links" optional="yes"/>
        <element name="excludes" optional="yes"/>
        <element name="additional-classpath" optional="yes"/>
        <sequential>
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src/java">
                        <include name="**/*.java"/>
                        <include name="**/*.aj"/>
                        <excludes/>
                    </fileset>
                </sourcefiles>
                <targetfiles path="build/reports/javadoc/index.html"/>
                <sequential>
                    <delete dir="build/reports/javadoc"/>
                    <mkdir dir="build/reports/javadoc"/>
                    <ajdoc destdir="build/reports/javadoc"
                      source="${java.source.version}" windowtitle="@{title}" failonerror="true">
                        <classpath>
                            <additional-classpath/>
                            <path refid="javac.classpath"/>
                        </classpath>
                        <fileset dir="src/java" defaultexcludes="yes">
                            <include name="**/*.java"/>
                            <include name="**/*.aj"/>
                            <excludes/>
                        </fileset>
                        <links/>
                    </ajdoc>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        Checkstyle macro

        Requires:
            path "javac.classpath"
            path "unittest.classpath"
            path "checkstyle.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="checkstyle">
        <attribute name="config" default="${build.macros.dir}/checkstyle/checkstyle.xml"/>
        <attribute name="style" default="${build.macros.dir}/checkstyle/checkstyle-frames-errors.xsl"/>
        <attribute name="textstyle" default="${build.macros.dir}/checkstyle/checkstyle-text.xsl"/>
        <attribute name="dir" default="${basedir}/build/reports/checkstyle"/>
        <attribute name="title" default="DellRoad.ORG Checkstyle Report"/>
        <attribute name="maxErrors" default="0"/>
        <attribute name="maxWarnings" default="0"/>
        <attribute name="showWarnings" default="true"/>
        <element name="excludes" optional="yes"/>
        <sequential>
            <mkdir dir="@{dir}"/>

            <!-- (Re)run checkstyle if necessary -->
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src">
                        <include name="**/*.java"/>
                        <exclude name="**/*MBean.java"/>
                        <excludes/>
                    </fileset>
                </sourcefiles>
                <targetfiles path="@{dir}/report.xml"/>
                <sequential>

                    <!-- Run checkstyle -->
                    <delete dir="@{dir}"/>
                    <mkdir dir="@{dir}"/>
                    <taskdef uri="urn:net.sf.checkstyle"
                      resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>
                    <checkstyle:checkstyle failOnViolation="false" failureProperty="checkstyle.failed"
                      config="@{config}" maxErrors="@{maxErrors}" maxWarnings="@{maxWarnings}">
                        <property key="checkstyle.cache.file" file="@{dir}/cachefile"/>
                        <formatter type="xml" toFile="@{dir}/report.xml"/>
                        <fileset dir="${basedir}/src">
                            <include name="**/*.java"/>
                            <exclude name="**/*MBean.java"/>
                            <excludes/>
                        </fileset>
                        <classpath>
                            <pathelement location="${basedir}/build/classes"/>
                            <pathelement location="${basedir}/build/test"/>
                            <path refid="javac.classpath"/>
                            <path refid="unittest.classpath"/>
                        </classpath>
                    </checkstyle:checkstyle>

                    <!-- Style XML report -->
                <!--
                    <xslt in="@{dir}/report.xml" out="@{dir}/report.out" style="@{style}">
                        <param name="title" expression="@{title}"/>
                        <param name="filename.strip.prefix" expression="${basedir}/"/>
                    </xslt>
                -->

                    <!-- Output textual version of report -->
                    <antcontrib:if>
                        <isset property="checkstyle.failed"/>
                        <antcontrib:then>
                            <xslt style="@{textstyle}" in="@{dir}/report.xml" out="/dev/stdout">
                                <param name="failed" expression="true"/>
                                <param name="filename.strip.prefix" expression="${basedir}/"/>
                                <param name="show.warnings" expression="@{showWarnings}"/>
                            </xslt>
                            <fail message="checkstyle failed"/>
                        </antcontrib:then>
                        <antcontrib:else>
                            <xslt style="@{textstyle}" in="@{dir}/report.xml" out="/dev/stdout">
                                <param name="failed" expression="false"/>
                                <param name="filename.strip.prefix" expression="${basedir}/"/>
                                <param name="show.warnings" expression="@{showWarnings}"/>
                            </xslt>
                        </antcontrib:else>
                    </antcontrib:if>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        FindBugs macro

        Requires:
            path "findbugs.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="findbugs">
        <attribute name="dir" description="Output directory" default="${basedir}/build/reports/findbugs"/>
        <attribute name="location" description="Directory where FindBugs is installed"/>
        <attribute name="reportLevel" description="Reporting level: low, medium, high" default="low"/>
        <attribute name="style" description="Report style: plain, default, fancy, fancy-hist, summary" default="default"/>
        <attribute name="effortLevel" description="Effort level: min, default, max" default="default"/>
        <sequential>

            <!-- Verify FindBugs exists -->
            <available file="@{location}" type="dir" property="findbugs.home.exists"/>
            <fail unless="findbugs.home.exists" message="Directory @{location} does not exist"/>

            <!-- Run FindBugs -->
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src/java" includes="**/*.java"/>
                </sourcefiles>
                <targetfiles path="@{dir}/report.xml"/>
                <sequential>

                    <!-- Clear out old stuff -->
                    <delete dir="@{dir}"/>
                    <mkdir dir="@{dir}"/>

                    <!-- Define task -->
                    <taskdef uri="urn:edu.umd.cs.findbugs" name="findbugs"
                      classpath="@{location}/lib/findbugs.jar"
                      classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

                    <!-- Generate XML report -->
                    <findbugs:findbugs home="@{location}" outputFile="@{dir}/report.xml"
                      output="xml:withMessages" reportLevel="@{reportLevel}" effort="@{effortLevel}">
                        <auxClasspath refid="findbugs.classpath"/>
                        <sourcePath path="${basedir}/src/java" />
                        <class location="${basedir}/build/classes" />
                    </findbugs:findbugs>
                </sequential>
            </antcontrib:outofdate>

            <!-- Style that into HTML report -->
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="@{dir}" includes="report.xml"/>
                </sourcefiles>
                <targetfiles path="@{dir}/index.html"/>
                <sequential>
                    <xslt style="@{location}/src/xsl/@{style}.xsl" in="@{dir}/report.xml" out="@{dir}/index.html"/>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        Show FindBugs macro
    -->
    <macrodef uri="urn:org.dellroad.ant" name="showbugs">
        <attribute name="dir" description="Output directory" default="${basedir}/build/reports/findbugs"/>
        <attribute name="location" description="Directory where FindBugs is installed"/>
        <sequential>
            <available file="@{dir}/report.xml" type="file" property="findbugs.report.exists"/>
            <fail unless="findbugs.report.exists" message="File @{dir}/report.xml does not exist"/>
            <exec executable="@{location}/bin/findbugs" logError="true" failonerror="true">
                <arg value="-loadbugs"/>
                <arg value="@{dir}/report.xml"/>
                <arg value="-home"/>
                <arg value="@{location}"/>
            </exec>
        </sequential>
    </macrodef>

    <!--
        JPA metamodel generation

        Requires:
            path "metamodel.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="metamodel">
        <attribute name="pxml" description="Location of persistence.xml"/>
        <attribute name="pkgs" description="Java packages to compile" default=""/>
        <sequential>
            <delete dir="build/metamodel"/>
            <mkdir dir="build/metamodel/src"/>
            <mkdir dir="build/metamodel/pxml/META-INF"/>
            <!-- <copy todir="build/metamodel/pxml/META-INF" file="@{pxml}"/> -->
            <dellroad:javac-default srcdir="src/java" includes="@{pkgs}" destdir="build/metamodel/src">
                <classpath refid="metamodel.classpath"/>
                <classpath path="build/metamodel/pxml"/>
                <compilerarg line="-proc:only"/>
            </dellroad:javac-default>
        </sequential>
    </macrodef>

<!--
        ************* PREDEFINED TARGETS ****************
-->

    <target name="clean" depends="clean-project" unless="clean.completed">
        <delete dir="build"/>
        <delete dir="dist"/>
        <property name="clean.completed" value="true"/>
    </target>
    <target name="clean-project"/>

    <!-- Find TestNG -->
    <target name="testng.classpath" unless="testng.classpath.resolved">
        <dellroad:ivymodpath pathid="testng.classpath" rev="6.+" org="org.testng" mod="testng"/>
        <property name="testng.classpath.resolved" value="true"/>
    </target>

    <!-- Find Cobertura -->
    <target name="cobertura.classpath" unless="cobertura.classpath.resolved">
        <dellroad:ivymodpath pathid="cobertura.classpath" rev="2+" org="net.sourceforge.cobertura" mod="cobertura"/>
        <property name="cobertura.classpath.resolved" value="true"/>
    </target>

    <!-- Find Checkstyle -->
    <target name="checkstyle.classpath" unless="checkstyle.classpath.resolved">
        <dellroad:ivymodpath pathid="checkstyle.classpath" rev="5.7" org="com.puppycrawl" mod="checkstyle"/>
        <property name="checkstyle.classpath.resolved" value="true"/>
    </target>

    <!-- JAVAC: Main classes -->
    <target name="javac-main" depends="javac.classpath" unless="javac-main.completed">
        <antcontrib:if>
            <available file="src/java" type="dir"/>
            <antcontrib:then>
                <mkdir dir="build/classes"/>
                <antcontrib:if>
                    <available file="build/metamodel/src" type="dir"/>
                    <antcontrib:then>
                        <antcontrib:outofdate>
                            <sourcefiles>
                                <fileset dir="src/java">
                                    <include name="**/*.java"/>
                                    <exclude name="**/package-info.java"/>
                                </fileset>
                                <fileset dir="build/metamodel/src" includes="**/*.java"/>
                            </sourcefiles>
                            <mapper type="glob" dir="src/java" from="*.java" to="build/classes/*.class"/>
                            <mapper type="glob" dir="build/metamodel/src" from="*.java" to="build/classes/*.class"/>
                            <sequential>
                                <mkdir dir="build/classes"/>
                                <dellroad:javac-default srcdir="src/java:build/metamodel/src" destdir="build/classes">
                                    <classpath refid="javac.classpath"/>
                                    <compilerarg line="-proc:none"/>
                                </dellroad:javac-default>
                            </sequential>
                        </antcontrib:outofdate>
                    </antcontrib:then>
                    <antcontrib:else>
                        <antcontrib:outofdate>
                            <sourcefiles>
                                <fileset dir="src/java">
                                    <include name="**/*.java"/>
                                    <exclude name="**/package-info.java"/>
                                </fileset>
                            </sourcefiles>
                            <mapper type="glob" dir="src/java" from="*.java" to="build/classes/*.class"/>
                            <sequential>
                                <mkdir dir="build/classes"/>
                                <dellroad:javac-default srcdir="src/java" destdir="build/classes">
                                    <classpath refid="javac.classpath"/>
                                    <compilerarg line="-proc:none"/>
                                </dellroad:javac-default>
                            </sequential>
                        </antcontrib:outofdate>
                    </antcontrib:else>
                </antcontrib:if>
            </antcontrib:then>
        </antcontrib:if>
        <property name="javac-main.completed" value="true"/>
    </target>

    <!-- JAVAC: Test classes -->
    <target name="javac-tests" depends="javac-project, javac.classpath, testng.classpath" unless="javac-tests.completed">
        <antcontrib:if>
            <available file="src/test" type="dir"/>
            <antcontrib:then>
                <antcontrib:outofdate>
                    <sourcefiles>
                        <fileset dir="src/test">
                            <include name="**/*.java"/>
                            <exclude name="**/package-info.java"/>
                        </fileset>
                    </sourcefiles>
                    <mapper type="glob" dir="src/test" from="*.java" to="build/test/*.class"/>
                    <sequential>
                        <mkdir dir="build/test"/>
                        <dellroad:javac-default srcdir="src/test" destdir="build/test">
                            <classpath path="build/classes"/>
                            <classpath refid="javac.classpath"/>
                            <classpath refid="testng.classpath"/>
                        </dellroad:javac-default>
                    </sequential>
                </antcontrib:outofdate>
            </antcontrib:then>
        </antcontrib:if>
        <property name="javac-tests.completed" value="true"/>
    </target>

    <target name="javac" depends="javac-project, javac-main, javac-tests" unless="javac.completed">
        <property name="javac.completed" value="true"/>
    </target>

    <target name="javac-project"/>

    <target name="reports" depends="reports-project" unless="reports.completed">
        <dellroad:svnrevision property="svn_revision"/>
        <tstamp>
            <format property="current.time" pattern="EEEE dd MMM yyyy HH:mm:ss"/>
        </tstamp>
        <xslt style="${build.macros.dir}/reports-index.xsl"
          in="${build.macros.dir}/reports-index.xsl" out="build/reports/index.html">
            <param name="basedir" expression="${basedir}"/>
            <param name="ant.project.name" expression="${ant.project.name}"/>
            <param name="svn.revision" expression="${svn_revision}"/>
            <param name="version" expression="${version}"/>
            <param name="timestamp" expression="${current.time}"/>
        </xslt>
        <antcontrib:if>
            <available file="src/java" type="dir"/>
            <antcontrib:then>
                <antcall target="javadoc" inheritRefs="true"/>
            </antcontrib:then>
        </antcontrib:if>
        <antcontrib:if>
            <available file="src/java" type="dir"/>
            <antcontrib:then>
                <antcall target="checkstyle" inheritRefs="true"/>
            </antcontrib:then>
        </antcontrib:if>
        <antcontrib:if>
            <available file="src/test" type="dir"/>
            <antcontrib:then>
                <antcall target="tests" inheritRefs="true"/>
            </antcontrib:then>
        </antcontrib:if>
<!--
        <antcontrib:if>
            <available file="src/java" type="dir"/>
            <antcontrib:then>
                <antcall target="findbugs" inheritRefs="true"/>
            </antcontrib:then>
        </antcontrib:if>
-->
        <property name="reports.completed" value="true"/>
    </target>
    <target name="reports-project"/>

    <target name="checkstyle-cleanup" unless="checkstyle-cleanup.completed">
        <exec executable="/bin/bash" logError="true" failonerror="true">
            <arg value="-c"/>
            <arg value="
                if ! [ -f build/reports/checkstyle/report.xml ]; then
                    echo 'ERROR: you must run &#34;ant checkstyle&#34; first!';
                    exit 1;
                fi;
                if [ -f build/reports/checkstyle/cleanup.sh ]; then
                    echo 'ERROR: only run &#34;ant checkstyle-cleanup&#34; once!';
                    exit 1;
                fi;
            "/>
        </exec>
        <xslt style="${build.macros.dir}/checkstyle/cleanup.xsl"
          in="build/reports/checkstyle/report.xml" out="build/reports/checkstyle/cleanup.sh"/>
        <exec executable="/bin/bash" logError="true" failonerror="true">
            <arg value="-x"/>
            <arg value="build/reports/checkstyle/cleanup.sh"/>
        </exec>
        <property name="checkstyle-cleanup.completed" value="true"/>
    </target>

    <!-- Application should override -->
    <target name="javac.classpath"/>

</project>

